//----------------------------------------------------------------------------//
//                          Instruction Definitions
//
// This file contains the all the bytecode instructions.
//
// The definitions can be used by defining one of the HANDLE functions below
// before including this definition file (see X-Macros). This way the
// definitions can be used to generate the Opcode enum, the dispatch area, etc.
//
// Most instructions are automatically expanded to all their supported types.
//----------------------------------------------------------------------------//

// clang-format off

#ifndef HANDLE_INST
#define HANDLE_INST(op, ...)
#endif

#ifndef HANDLE_TYPED_INST
#define HANDLE_TYPED_INST(op, type, ...) HANDLE_INST(op##_##type, __VA_ARGS__)
#endif

// Creates instances of a given opcode for all integer primitive types
#define CREATE_FOR_INT_TYPES(func, op, ...)      \
  func(op, i8, __VA_ARGS__)                      \
  func(op, i16, __VA_ARGS__)                     \
  func(op, i32, __VA_ARGS__)                     \
  func(op, i64, __VA_ARGS__)                     \
  func(op, u8, __VA_ARGS__)                      \
  func(op, u16, __VA_ARGS__)                     \
  func(op, u32, __VA_ARGS__)                     \
  func(op, u64, __VA_ARGS__)

// Creates instances of a given opcode for all floating-point primitive types
#define CREATE_FOR_FLOAT_TYPES(func, op) func(op, f32) func(op, f64)

// Creates instances of a given opcode for *ALL* primitive types
#define CREATE_FOR_ALL_TYPES(func, op, ...)   \
  CREATE_FOR_INT_TYPES(func, op, __VA_ARGS__) \
  CREATE_FOR_FLOAT_TYPES(func, op, __VA_ARGS__)

#define GET_BASE_FOR_INT_TYPES(op) (op##_i8)
#define GET_BASE_FOR_FLOAT_TYPES(op) (op##_f32)

HANDLE_INST(Wide)
HANDLE_INST(ExtraWide)

// Constants
HANDLE_INST(LoadConstant1, OperandType::Reg, OperandType::Imm1)
HANDLE_INST(LoadConstant2, OperandType::Reg, OperandType::Imm2)
HANDLE_INST(LoadConstant4, OperandType::Reg, OperandType::Imm4)
HANDLE_INST(LoadConstant8, OperandType::Reg, OperandType::Imm8)

// Branching
HANDLE_INST(Jump, OperandType::UImm2)
HANDLE_INST(JumpIfTrue, OperandType::Reg, OperandType::UImm2)
HANDLE_INST(JumpIfFalse, OperandType::Reg, OperandType::UImm2)

// Tables
HANDLE_INST(ScanOpen)
HANDLE_INST(ScanNext)
HANDLE_INST(ScanClose)

HANDLE_INST(Return)

// Primitive operations
CREATE_FOR_INT_TYPES(HANDLE_TYPED_INST, Add, OperandType::Reg, OperandType::Reg, OperandType::Reg)
CREATE_FOR_INT_TYPES(HANDLE_TYPED_INST, Sub, OperandType::Reg, OperandType::Reg, OperandType::Reg)
CREATE_FOR_INT_TYPES(HANDLE_TYPED_INST, Mul, OperandType::Reg, OperandType::Reg, OperandType::Reg)
CREATE_FOR_INT_TYPES(HANDLE_TYPED_INST, Div, OperandType::Reg, OperandType::Reg, OperandType::Reg)
CREATE_FOR_INT_TYPES(HANDLE_TYPED_INST, Rem, OperandType::Reg, OperandType::Reg, OperandType::Reg)
CREATE_FOR_INT_TYPES(HANDLE_TYPED_INST, BitAnd, OperandType::Reg, OperandType::Reg, OperandType::Reg)
CREATE_FOR_INT_TYPES(HANDLE_TYPED_INST, BitOr, OperandType::Reg, OperandType::Reg, OperandType::Reg)
CREATE_FOR_INT_TYPES(HANDLE_TYPED_INST, BitXor, OperandType::Reg, OperandType::Reg, OperandType::Reg)
CREATE_FOR_INT_TYPES(HANDLE_TYPED_INST, Neg, OperandType::Reg, OperandType::Reg)
CREATE_FOR_INT_TYPES(HANDLE_TYPED_INST, BitNeg, OperandType::Reg, OperandType::Reg)
CREATE_FOR_INT_TYPES(HANDLE_TYPED_INST, GreaterThan, OperandType::Reg, OperandType::Reg, OperandType::Reg)
CREATE_FOR_INT_TYPES(HANDLE_TYPED_INST, GreaterThanEqual, OperandType::Reg, OperandType::Reg, OperandType::Reg)
CREATE_FOR_INT_TYPES(HANDLE_TYPED_INST, Equal, OperandType::Reg, OperandType::Reg, OperandType::Reg)
CREATE_FOR_INT_TYPES(HANDLE_TYPED_INST, LessThan, OperandType::Reg, OperandType::Reg, OperandType::Reg)
CREATE_FOR_INT_TYPES(HANDLE_TYPED_INST, LessThanEqual, OperandType::Reg, OperandType::Reg, OperandType::Reg)
CREATE_FOR_INT_TYPES(HANDLE_TYPED_INST, NotEqual, OperandType::Reg, OperandType::Reg, OperandType::Reg)

// hygiene
#undef CREATE_FOR_ALL_TYPES
#undef CREATE_FOR_FLOAT_TYPES
#undef CREATE_FOR_INT_TYPES
#undef HANDLE_TYPED_INST
#undef HANDLE_INST

// clang-format on